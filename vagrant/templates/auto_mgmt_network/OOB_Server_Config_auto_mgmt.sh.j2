{% set mgmt_ips = devices[0].mgmt_ip.split(',') -%}
#!/bin/bash
# Created by Topology-Converter v{{ version }}
#    https://github.com/cumulusnetworks/topology_converter
#    using topology data from: {{ topology_file }}

#######################
#       KNOBS
#######################

REPOSITORY="https://github.com/CumulusNetworks/example"
REPONAME="example"

#Install Automation Tools
puppet=0
ansible=1
ansible_version=2.1.3.0

#######################

username=$(cat /tmp/normal_user)

install_puppet(){
    echo " ### Adding Puppet Repositories... ###"
    wget https://apt.puppetlabs.com/puppetlabs-release-pc1-xenial.deb
    dpkg -i puppetlabs-release-pc1-xenial.deb
    echo " ### Updating APT Repository... ###"
    apt-get update -y
    echo " ### Installing Puppet ###"
    apt-get install puppetserver -qy
    echo " ### Setting up Puppet ###"
    rm -rf /etc/puppetlabs/code/environments/production
    sed -i 's/-Xms2g/-Xms512m/g' /etc/default/puppetserver
    sed -i 's/-Xmx2g/-Xmx512m/g' /etc/default/puppetserver
    echo "*" > /etc/puppetlabs/puppet/autosign.conf
    sed -i 's/{{ mgmt_ips[0] }}/{{ mgmt_ips[0] }} puppet /g'>> /etc/hosts
}

install_ansible(){
    echo " ### Installing Ansible... ###"
    apt-get install -qy ansible sshpass libssh-dev python-dev libssl-dev libffi-dev
    pip install pip --upgrade
    pip install setuptools --upgrade
    pip install ansible==$ansible_version --upgrade
}


echo "################################################"
echo "  Running Automatic Management Server Setup..."
echo "################################################"
echo -e "\n This script assumes an Ubuntu16.04 server."
echo " Detected vagrant user is: $username"

cat <<EOT > /etc/network/interfaces
auto lo
iface lo inet loopback

auto vagrant
iface vagrant inet dhcp

{% for mgmt_ip in mgmt_ips %}
auto mgmt_net
iface mgmt_net inet static
    address {{ mgmt_ip }}/24
{% endfor %}
EOT

echo " ### Overwriting DNS Server to 8.8.8.8 ###"
#Required because the installation of DNSmasq throws off DNS momentarily
echo "nameserver 8.8.8.8" >> /etc/resolvconf/resolv.conf.d/head

echo " ### Updating APT Repository... ###"
apt-get update -y

echo " ### Installing Packages... ###"
apt-get install -y htop isc-dhcp-server tree apache2 vlan git python-pip dnsmasq ifenslave apt-cacher-ng lldpd ntp
modprobe 8021q
#modprobe bonding
echo "8021q" >> /etc/modules

if [ $puppet -eq 1 ]; then
    echo " ### Installing Puppet ### "
    install_puppet
fi
if [ $ansible -eq 1 ]; then
    echo " ### Installing Ansible ### "
    install_ansible
fi

echo " ### Configure NTP... ###"
echo <<EOT >> /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable

server clock.rdu.cumulusnetworks.com

# By default, exchange time with everybody, but don't allow configuration.
restrict -4 default kod notrap nomodify nopeer noquery
restrict -6 default kod notrap nomodify nopeer noquery

# Local users may interrogate the ntp server more closely.
restrict 127.0.0.1
restrict ::1
EOT

echo " ### Creating cumulus user ###"
useradd -m cumulus

echo " ### Setting Up DHCP ###"
mv /home/$username/dhcpd.conf /etc/dhcp/dhcpd.conf
mv /home/$username/dhcpd.hosts /etc/dhcp/dhcpd.hosts
chmod 755 -R /etc/dhcp/*
systemctl restart isc-dhcp-server

echo " ### Setting up ZTP ###"
mv /home/$username/ztp_oob.sh /var/www/html/ztp_oob.sh

echo " ### Setting Up Hostfile ###"
mv /home/$username/hosts /etc/hosts

echo " ### Moving Ansible Hostfile into place ###"
mkdir -p /etc/ansible
mv /home/$username/ansible_hostfile /etc/ansible/hosts

echo " ###Creating SSH keys for cumulus user ###"
mkdir /home/cumulus/.ssh
/usr/bin/ssh-keygen -b 2048 -t rsa -f /home/cumulus/.ssh/id_rsa -q -N ""
chown cumulus /home/cumulus/.ssh/id_rsa.pub
chown cumulus /home/cumulus/.ssh/id_rsa
chown -R cumulus:cumulus /home/cumulus/.ssh

echo "Copying Key into /var/www/html..."
cp /home/cumulus/.ssh/id_rsa.pub /var/www/html/authorized_keys

chmod 777 -R /var/www/html/*

echo " ###Making cumulus passwordless sudo ###"
echo "cumulus ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/10_cumulus

echo ' ### Setting UP NAT and Routing on MGMT server... ### '
echo -e '#!/bin/bash \n/sbin/iptables -t nat -A POSTROUTING -o vagrant -j MASQUERADE' > /etc/rc.local
echo "net.ipv4.ip_forward=1" > /etc/sysctl.d/98-ipforward.conf


echo " ### Creating turnup.sh script ###"
    cat <<EOT >> /home/cumulus/turnup.sh
git clone $REPOSITORY
EOT

if [ $puppet -eq 1 ]; then
    cat <<EOT >> /home/cumulus/turnup.sh
sudo rm -rf /etc/puppetlabs/code/environments/production
sudo ln -s  /home/cumulus/$REPONAME/puppet/ /etc/puppetlabs/code/environments/production
sudo /opt/puppetlabs/bin/puppet module install puppetlabs-stdlib
#sudo bash -c 'echo "certname = {{ mgmt_ips[0] }}" >> /etc/puppetlabs/puppet/puppet.conf'
echo " ### STARTING PUPPETSERVER... ###"
echo "     (this may take a while 30 secs or so...)"
sudo systemctl restart puppetserver.service  
EOT
fi
if [ $ansible -eq 1 ]; then
    cat <<EOT >> /home/cumulus/turnup.sh
#Add any ansible specific steps here
EOT
fi

chmod +x /home/cumulus/turnup.sh

echo " ### creating .gitconfig for cumulus user"
cat <<EOT >> /home/cumulus/.gitconfig
[push]
  default = matching
[color]
    ui = true
[credential]
    helper = cache --timeout=3600
[core]
    editor = vim
EOT

echo "############################################"
echo "      DONE!"
echo "############################################"
